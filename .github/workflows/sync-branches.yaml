name: Sync Upstream

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      downstream_branch:
        description: Downstream branch to update (destination)
        required: false
        default: main
      upstream_branch:
        description: Upstream branch to sync from (source)
        required: false
        default: main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      DOWNSTREAM_BRANCH: ${{ inputs.downstream_branch || 'main' }}
      UPSTREAM_BRANCH: ${{ inputs.upstream_branch || 'main' }}
      HEAD_BRANCH: sync/upstream-${{ inputs.upstream_branch || 'main' }}
      LABEL: automated-merge-sync

    steps:
      - name: Checkout downstream repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DOWNSTREAM_BRANCH }}
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.REPO_WORKFLOW_PAT }}

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config rerere.enabled true

      - name: Add upstream remote and fetch
        run: |
          git remote add upstream https://github.com/mstokluska-test/wflow-test || git remote set-url upstream https://github.com/mstokluska-test/wflow-test
          git fetch --prune upstream "${UPSTREAM_BRANCH}"
          git fetch --prune origin "${DOWNSTREAM_BRANCH}"

      - name: Start sync branch from downstream
        run: |
          set -euo pipefail
          git checkout -B "${HEAD_BRANCH}" "origin/${DOWNSTREAM_BRANCH}"

      - name: Merge upstream into downstream (pin owned paths to downstream)
        id: merge_step
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob

          OWNED_DIR=".github"
          OWNED_FILES=("CHANGELOG" "OWNERS")

          have_in_ref() {
            local ref="$1" p="$2"
            if git cat-file -e "${ref}:${p}" 2>/dev/null; then return 0; fi
            git ls-tree -r --name-only "${ref}" -- "${p%/}" 2>/dev/null | grep -q '^' && return 0
            git ls-tree -r --name-only "${ref}" | grep -q "^${p%/}/" && return 0
            return 1
          }

          clobber_from_downstream() {
            local p="$1"
            git rm -r --quiet --ignore-unmatch --cached -- "${p%/}" || true
            git rm -r --quiet --ignore-unmatch -- "${p%/}" || true
            if have_in_ref "origin/${DOWNSTREAM_BRANCH}" "${p%/}"; then
              git checkout "origin/${DOWNSTREAM_BRANCH}" -- "${p%/}" || true
            fi
          }

          # Try a merge without committing yet so we can pin owned paths first
          if git merge --no-ff --no-commit "upstream/${UPSTREAM_BRANCH}"; then
            # Clean merge → clobber owned paths to match downstream, then commit the merge
            clobber_from_downstream "${OWNED_DIR}"
            for p in "${OWNED_FILES[@]}"; do clobber_from_downstream "$p"; done

            # If clobber changed anything, it will be part of the merge commit
            git commit -m "Merge upstream/${UPSTREAM_BRANCH} into ${DOWNSTREAM_BRANCH} (owned paths pinned)"
            echo "mode=clean-merge" >> "$GITHUB_OUTPUT"
          else
            # There are conflicts; detect them
            mapfile -t CONFLICTS < <(git diff --name-only --diff-filter=U || true)

            # If conflicts are ONLY in owned paths, resolve them to downstream and complete merge
            only_owned=true
            for f in "${CONFLICTS[@]}"; do
              case "$f" in
                ${OWNED_DIR}/*|${OWNED_DIR}|CHANGELOG|OWNERS) : ;;
                *) only_owned=false; break ;;
              esac
            done

            if $only_owned; then
              echo "Conflicts only in owned paths – resolving to downstream…"
              # Keep downstream version for owned conflicts
              for f in "${CONFLICTS[@]}"; do
                git checkout --ours -- "$f" || true
                git add -- "$f" || true
              done
              # Also clobber full owned paths to ensure exact match
              clobber_from_downstream "${OWNED_DIR}"
              for p in "${OWNED_FILES[@]}"; do clobber_from_downstream "$p"; done

              git commit -m "Merge upstream/${UPSTREAM_BRANCH} into ${DOWNSTREAM_BRANCH} (owned path conflicts resolved to downstream)"
              echo "mode=owned-conflicts-resolved" >> "$GITHUB_OUTPUT"
            else
              echo "Conflicts outside owned paths – switching to conflict PR mode…"
              git merge --abort

              # Base conflict PR on upstream, then pin owned paths to downstream
              git checkout -B "${HEAD_BRANCH}" "upstream/${UPSTREAM_BRANCH}"
              clobber_from_downstream "${OWNED_DIR}"
              for p in "${OWNED_FILES[@]}"; do clobber_from_downstream "$p"; done

              if ! git diff --quiet -- "${OWNED_DIR}" CHANGELOG OWNERS; then
                git add -A
                git commit -m "Preserve downstream-owned files on conflict PR"
              fi

              echo "mode=conflict-pr" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Detect actual changes vs downstream (exclude owned paths)
        id: diffcheck
        shell: bash
        run: |
          set -euo pipefail
          if git diff --quiet "origin/${DOWNSTREAM_BRANCH}...${HEAD_BRANCH}" -- . \
            ':(exclude).github' \
            ':(exclude)CHANGELOG' \
            ':(exclude)OWNERS'
          then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "Only owned-path changes (or no changes); skipping push/PR."
          else
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Push sync branch (only if changed)
        if: steps.diffcheck.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          set -euo pipefail
          # Push feature branch only (no force-push to base)
          git push origin "${HEAD_BRANCH}" --force-with-lease

      - name: Create or update PR (only if changed)
        if: steps.diffcheck.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          TITLE="chore: Merge upstream/${UPSTREAM_BRANCH} into ${DOWNSTREAM_BRANCH}"
          MODE="${{ steps.merge_step.outputs.mode || 'clean-merge' }}"
          NOTE=$([ "$MODE" = "conflict-pr" ] && echo "There were conflicts outside owned paths; review required." || echo "Clean merge or only-owned conflicts resolved to downstream.")
          BODY=$'Automated upstream sync via merge.\n\n- Source: upstream/'"${UPSTREAM_BRANCH}"$'\n- Base: '"${DOWNSTREAM_BRANCH}"$'\n- Owned paths pinned to downstream: .github/**, CHANGELOG, OWNERS\n\n'"${NOTE}"
          PR_NUMBER=$(gh pr list --repo "${GITHUB_REPOSITORY}" --head "${HEAD_BRANCH}" --state open --label "${LABEL}" --json number --jq '.[0].number // empty')
          if [ -n "${PR_NUMBER}" ]; then
            gh pr edit "${PR_NUMBER}" --repo "${GITHUB_REPOSITORY}" --title "${TITLE}" --body "${BODY}"
          else
            gh pr create --repo "${GITHUB_REPOSITORY}" --base "${DOWNSTREAM_BRANCH}" --head "${HEAD_BRANCH}" --title "${TITLE}" --body "${BODY}" --label "${LABEL}"
          fi
