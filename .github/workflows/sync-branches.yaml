name: Sync Upstream

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      downstream_branch:
        description: Downstream branch to update (destination)
        required: false
        default: main
      upstream_branch:
        description: Upstream branch to sync from (source)
        required: false
        default: main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      DOWNSTREAM_BRANCH: ${{ inputs.downstream_branch || 'main' }}
      UPSTREAM_BRANCH: ${{ inputs.upstream_branch || 'main' }}
      HEAD_BRANCH: sync/upstream-${{ inputs.upstream_branch || 'main' }}
      LABEL: automated-rebase

    steps:
      - name: Checkout downstream repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DOWNSTREAM_BRANCH }}
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.REPO_WORKFLOW_PAT }}

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config rerere.enabled true
          git config advice.skippedCherryPicks false

      - name: Add upstream remote and fetch
        run: |
          git remote add upstream https://github.com/mstokluska-test/wflow-test || git remote set-url upstream https://github.com/mstokluska-test/wflow-test
          git fetch --prune upstream "${UPSTREAM_BRANCH}"
          git fetch --prune origin "${DOWNSTREAM_BRANCH}"

      - name: Build/refresh sync branch from downstream base
        run: |
          set -euo pipefail
          git checkout -B "${HEAD_BRANCH}" "origin/${DOWNSTREAM_BRANCH}"

      - name: Rebase onto upstream (keep downstream for owned paths)
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob

          # --- Owned paths: always keep downstream version ---
          # Use a built-in "ours" merge driver via .git/info/attributes (not committed).
          {
            echo ".github/** merge=ours"
            echo "CHANGELOG merge=ours"
            echo "OWNERS merge=ours"
          } >> .git/info/attributes
          git config merge.ours.driver true

          OWNED_PATHS=(
            ".github/**"
            "CHANGELOG"
            "OWNERS"
          )
          is_owned() {
            local f="$1"
            for pat in "${OWNED_PATHS[@]}"; do
              [[ "$f" == $pat ]] && return 0
            done
            return 1
          }

          REBASE_OK=false
          if git rebase "upstream/${UPSTREAM_BRANCH}"; then
            REBASE_OK=true
          else
            while true; do
              mapfile -t CONFLICTS < <(git diff --name-only --diff-filter=U || true)
              if ((${#CONFLICTS[@]}==0)); then
                echo "Rebase paused without listed conflicts; aborting for safety."
                git rebase --abort
                break
              fi

              ONLY_OWNED=true
              for f in "${CONFLICTS[@]}"; do
                if ! is_owned "$f"; then ONLY_OWNED=false; break; fi
              done

              if "$ONLY_OWNED"; then
                echo "Conflicts only in owned paths; keeping downstream versions…"
                for f in "${CONFLICTS[@]}"; do
                  git checkout --ours -- "$f" || true
                  git add -- "$f" || true
                done
                if git -c core.editor=true rebase --continue; then
                  REBASE_OK=true
                  break
                fi
              else
                echo "Conflicts outside owned paths detected:"
                printf '  - %s\n' "${CONFLICTS[@]}"
                echo "Aborting rebase and switching to conflict-PR mode…"
                git rebase --abort

                # Base conflict PR branch on upstream
                git checkout -B "${HEAD_BRANCH}" "upstream/${UPSTREAM_BRANCH}"

                # HARD-CLOBBER owned paths to match downstream exactly:
                # remove current tree, then restore from origin/${DOWNSTREAM_BRANCH}
                if git ls-tree -r --name-only HEAD -- .github 2>/dev/null | grep -q .; then
                  git rm -r --cached --quiet --force .github || true
                  git rm -r --quiet --force .github || true
                fi
                git checkout "origin/${DOWNSTREAM_BRANCH}" -- .github || true
                # CHANGELOG & OWNERS too
                for p in CHANGELOG OWNERS; do
                  if git cat-file -e "origin/${DOWNSTREAM_BRANCH}:$p" 2>/dev/null; then
                    git checkout "origin/${DOWNSTREAM_BRANCH}" -- "$p" || true
                  else
                    git rm -f -- "$p" || true
                  fi
                done

                if ! git diff --quiet -- .github CHANGELOG OWNERS; then
                  git add -A
                  git -c commit.gpgsign=false commit -m "Preserve downstream-owned files on conflict PR"
                fi
                REBASE_OK=false
                break
              fi
            done
          fi

          # After a successful rebase, ensure owned paths are identical to downstream.
          if [ "$REBASE_OK" = true ]; then
            CHANGED=false
            # Replace tree completely for .github to prevent any upstream leak.
            if ! git diff --quiet "origin/${DOWNSTREAM_BRANCH}" "HEAD" -- .github; then
              if git ls-tree -r --name-only HEAD -- .github 2>/dev/null | grep -q .; then
                git rm -r --cached --quiet --force .github || true
                git rm -r --quiet --force .github || true
              fi
              git checkout "origin/${DOWNSTREAM_BRANCH}" -- .github || true
              CHANGED=true
            fi
            for p in CHANGELOG OWNERS; do
              if ! git diff --quiet "origin/${DOWNSTREAM_BRANCH}" "HEAD" -- "$p" 2>/dev/null; then
                if git cat-file -e "origin/${DOWNSTREAM_BRANCH}:$p" 2>/dev/null; then
                  git checkout "origin/${DOWNSTREAM_BRANCH}" -- "$p" || true
                else
                  git rm -f -- "$p" || true
                fi
                CHANGED=true
              fi
            done

            if [ "$CHANGED" = true ]; then
              git add -A
              # Amend into tip if there is at least one downstream commit atop upstream.
              DOWNSTREAM_ON_TOP=$(git rev-list --count "upstream/${UPSTREAM_BRANCH}..HEAD" || echo 0)
              if [ "$DOWNSTREAM_ON_TOP" -ge 1 ]; then
                git -c commit.gpgsign=false commit --amend --no-edit
              else
                git -c commit.gpgsign=false commit -m "Preserve downstream-owned files after rebase"
              fi
            fi
          fi

      - name: Detect actual changes vs downstream (tree diff, excluding owned paths)
        id: diffcheck
        shell: bash
        run: |
          set -euo pipefail
          # Ignore owned paths so they never cause a PR by themselves.
          if git diff --quiet "origin/${DOWNSTREAM_BRANCH}...${HEAD_BRANCH}" -- . \
            ':(exclude).github' \
            ':(exclude)CHANGELOG' \
            ':(exclude)OWNERS'
          then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "Only owned-path changes (or no changes); skipping push/PR."
          else
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Push sync branch (only if changed)
        if: steps.diffcheck.outputs.has_changes == 'true'
        run: |
          set -euo pipefail
          # Push only the feature branch. Base branch is never force-updated.
          git push origin "${HEAD_BRANCH}" --force-with-lease

      - name: Create or update PR (only if changed)
        if: steps.diffcheck.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TITLE="fix: Sync upstream/${UPSTREAM_BRANCH} into ${DOWNSTREAM_BRANCH}"
          BODY=$'Automated upstream sync; downstream-owned files preserved and ignored for PR creation.\n\n- Source: upstream/'"${UPSTREAM_BRANCH}"$'\n- Base: '"${DOWNSTREAM_BRANCH}"$'\n- Owned: .github/**, CHANGELOG, OWNERS'
          PR_NUMBER=$(gh pr list \
            --repo "${GITHUB_REPOSITORY}" \
            --head "${HEAD_BRANCH}" \
            --state open \
            --label "${LABEL}" \
            --json number --jq '.[0].number // empty')
          if [ -n "${PR_NUMBER}" ]; then
            gh pr edit "${PR_NUMBER}" --repo "${GITHUB_REPOSITORY}" --title "${TITLE}" --body "${BODY}"
          else
            gh pr create --repo "${GITHUB_REPOSITORY}" \
              --base "${DOWNSTREAM_BRANCH}" \
              --head "${HEAD_BRANCH}" \
              --title "${TITLE}" \
              --body "${BODY}" \
              --label "${LABEL}"
          fi