name: Sync Upstream (Simplified)

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      downstream_branch:
        description: Downstream branch to update (destination)
        required: false
        default: main
      upstream_branch:
        description: Upstream branch to sync from (source)
        required: false
        default: main

permissions:
  contents: write
  pull-requests: write

jobs:
  sync:
    runs-on: ubuntu-latest
    env:
      DOWNSTREAM_BRANCH: ${{ inputs.downstream_branch || 'main' }}
      UPSTREAM_BRANCH: ${{ inputs.upstream_branch || 'main' }}
      HEAD_BRANCH: sync/upstream-${{ inputs.upstream_branch || 'main' }}
      LABEL: automated-merge-sync

    steps:
      - name: Checkout downstream repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.DOWNSTREAM_BRANCH }}
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.REPO_WORKFLOW_PAT }}

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Add upstream remote and fetch
        run: |
          git remote add upstream https://github.com/mstokluska-test/wflow-test || git remote set-url upstream https://github.com/mstokluska-test/wflow-test
          git fetch upstream "${UPSTREAM_BRANCH}"
          git fetch origin "${DOWNSTREAM_BRANCH}"
      - name: Create sync branch from upstream (preserves SHAs)
        run: |
          # Start from upstream to preserve commit SHAs
          git checkout -B "${HEAD_BRANCH}" "upstream/${UPSTREAM_BRANCH}"
      - name: Cherry-pick midstream-only commits
        id: sync
        run: |
          set -euo pipefail
          
          # Find commits that are in downstream but not in upstream
          MIDSTREAM_COMMITS=$(git rev-list --reverse "upstream/${UPSTREAM_BRANCH}..origin/${DOWNSTREAM_BRANCH}" || echo "")
          
          if [ -z "$MIDSTREAM_COMMITS" ]; then
            echo "No midstream-only commits to sync"
            echo "has_midstream_commits=false" >> "$GITHUB_OUTPUT"
            echo "has_conflict=false" >> "$GITHUB_OUTPUT"
          else
            echo "has_midstream_commits=true" >> "$GITHUB_OUTPUT"
            echo "Found midstream commits to cherry-pick"
            
            # Function to check if path is excluded
            is_excluded() {
              local file="$1"
              [[ "$file" == .github/* ]] || [[ "$file" == CHANGELOG ]] || [[ "$file" == OWNERS ]]
            }
            
            # Try to cherry-pick each commit
            CONFLICT=false
            for commit in $MIDSTREAM_COMMITS; do
              echo "Cherry-picking commit: $commit"
              if ! git cherry-pick "$commit"; then
                # Check if conflicts are only in excluded paths
                mapfile -t CONFLICTS < <(git diff --name-only --diff-filter=U || true)
                
                if [ ${#CONFLICTS[@]} -eq 0 ]; then
                  echo "Warning: Cherry-pick failed but no conflicts listed"
                  git cherry-pick --abort
                  CONFLICT=true
                  break
                fi
                
                ONLY_EXCLUDED=true
                for file in "${CONFLICTS[@]}"; do
                  if ! is_excluded "$file"; then
                    ONLY_EXCLUDED=false
                    echo "Conflict in non-excluded file: $file"
                    break
                  fi
                done
                
                if [ "$ONLY_EXCLUDED" = true ]; then
                  # Conflicts only in excluded paths - keep midstream version (theirs in cherry-pick)
                  echo "Conflicts only in excluded paths, keeping midstream version"
                  for file in "${CONFLICTS[@]}"; do
                    git checkout --theirs "$file" || true
                    git add "$file" || true
                  done
                  git -c core.editor=true cherry-pick --continue
                else
                  # Real conflict - abort and stop
                  echo "ERROR: Conflict detected outside excluded paths"
                  git cherry-pick --abort
                  CONFLICT=true
                  break
                fi
              fi
            done
            
            echo "has_conflict=$CONFLICT" >> "$GITHUB_OUTPUT"
          fi
      - name: Restore excluded paths from midstream
        if: steps.sync.outputs.has_midstream_commits == 'true' && steps.sync.outputs.has_conflict != 'true'
        run: |
          # Force restore excluded paths from downstream
          for path in .github CHANGELOG OWNERS; do
            if git cat-file -e "origin/${DOWNSTREAM_BRANCH}:$path" 2>/dev/null; then
              # Remove what's currently there
              git rm -rf "$path" 2>/dev/null || true
              # Restore from downstream
              git checkout "origin/${DOWNSTREAM_BRANCH}" -- "$path" || true
            fi
          done
          
          # Commit if there are changes
          if ! git diff --quiet HEAD; then
            git add -A
            git commit -m "chore: restore midstream-owned paths"
          fi
      - name: Handle conflicts (create minimal conflict marker)
        if: steps.sync.outputs.has_conflict == 'true'
        run: |
          # Reset to upstream and create a conflict marker file
          git checkout -B "${HEAD_BRANCH}" "upstream/${UPSTREAM_BRANCH}"
          
          # Restore excluded paths from midstream
          for path in .github CHANGELOG OWNERS; do
            if git cat-file -e "origin/${DOWNSTREAM_BRANCH}:$path" 2>/dev/null; then
              git rm -rf "$path" 2>/dev/null || true
              git checkout "origin/${DOWNSTREAM_BRANCH}" -- "$path" || true
            fi
          done
          
          printf '%s\n' \
            '# Merge Conflicts Detected' \
            '' \
            'This is an automated PR indicating that upstream changes conflict with midstream changes.' \
            'Manual intervention is required to resolve conflicts.' \
            '' \
            '**Action Required:** Please manually merge the branches and resolve conflicts.' \
            '' \
            'Excluded paths (.github, CHANGELOG, OWNERS) have been preserved from midstream.' \
            > MERGE_CONFLICT_NOTICE.md
          
          git add -A
          git commit -m "chore: merge conflict detected - manual resolution required"

      - name: Check for actual changes
        id: diffcheck
        run: |
          # If there was a conflict, always create/update PR
          if [ "${{ steps.sync.outputs.has_conflict }}" = "true" ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "Conflict detected - PR needed"
            exit 0
          fi
          
          # Compare the sync branch with downstream, excluding owned paths
          # Use pathspec to exclude the paths we don't want to sync
          if git diff --quiet "origin/${DOWNSTREAM_BRANCH}...${HEAD_BRANCH}" -- \
            ':!.github' ':!CHANGELOG' ':!OWNERS'; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            echo "No changes outside excluded paths"
          else
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "Changes detected outside excluded paths"
          fi
      - name: Push sync branch
        if: steps.diffcheck.outputs.has_changes == 'true'
        run: |
          # Use --force-with-lease to safely update the sync branch
          # This does NOT touch the main branch
          git push origin "${HEAD_BRANCH}" --force-with-lease
      - name: Create or update PR
        if: steps.diffcheck.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "${{ steps.sync.outputs.has_conflict }}" = "true" ]; then
            TITLE="⚠️ sync: Merge conflicts between upstream/${UPSTREAM_BRANCH} and ${DOWNSTREAM_BRANCH}"
            BODY="## ⚠️ Merge Conflicts Detected"$'\n\n'"This automated PR indicates that upstream changes conflict with midstream changes."$'\n'"**Manual intervention is required** to resolve conflicts."$'\n\n'"### Action Required"$'\n'"Please manually merge \`upstream/${UPSTREAM_BRANCH}\` into \`${DOWNSTREAM_BRANCH}\` and resolve conflicts."$'\n\n'"### Details"$'\n'"- **Source:** upstream/${UPSTREAM_BRANCH}"$'\n'"- **Target:** ${DOWNSTREAM_BRANCH}"$'\n'"- **Excluded paths:** \`.github\`, \`CHANGELOG\`, \`OWNERS\` (preserved from midstream)"$'\n\n'"The excluded paths will never cause conflicts and have been automatically preserved."
          else
            TITLE="sync: Merge upstream/${UPSTREAM_BRANCH} into ${DOWNSTREAM_BRANCH}"
            BODY="## Automated Upstream Sync ✅"$'\n\n'"This PR merges upstream changes into midstream."$'\n\n'"### Details"$'\n'"- **Source:** upstream/${UPSTREAM_BRANCH}"$'\n'"- **Target:** ${DOWNSTREAM_BRANCH}"$'\n'"- **Excluded paths:** \`.github\`, \`CHANGELOG\`, \`OWNERS\` (preserved from midstream)"$'\n\n'"All midstream commits appear on top of upstream commits, preserving upstream commit SHAs."
          fi

          # Check if PR already exists
          PR_NUMBER=$(gh pr list \
            --repo "${GITHUB_REPOSITORY}" \
            --head "${HEAD_BRANCH}" \
            --base "${DOWNSTREAM_BRANCH}" \
            --state open \
            --label "${LABEL}" \
            --json number \
            --jq '.[0].number // empty')

          if [ -n "$PR_NUMBER" ]; then
            echo "Updating existing PR #${PR_NUMBER}"
            gh pr edit "$PR_NUMBER" \
              --repo "${GITHUB_REPOSITORY}" \
              --title "$TITLE" \
              --body "$BODY"
          else
            echo "Creating new PR"
            gh pr create \
              --repo "${GITHUB_REPOSITORY}" \
              --base "${DOWNSTREAM_BRANCH}" \
              --head "${HEAD_BRANCH}" \
              --title "$TITLE" \
              --body "$BODY" \
              --label "${LABEL}" 2>&1 || \
            gh pr create \
              --repo "${GITHUB_REPOSITORY}" \
              --base "${DOWNSTREAM_BRANCH}" \
              --head "${HEAD_BRANCH}" \
              --title "$TITLE" \
              --body "$BODY"
          fi